<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/ContactQueryInputToSBL.map" md5sum="b93db57d8f14454c79538c72d4cf038b" version="7.0.200" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor V7.0.200
*
*   Mapping file:		ContactQueryInputToSBL.map
*   Map declaration(s):	ContactQueryInputToSBL
*   Input file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FSBL_ContactWidget_Lib%252FInvoke%257DContactQueryRequestMsg/xpath%3D%252Fbody/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252Fwservice.cerner.com%252FV2%257DContact_spcQuery_spcWPS_spcCERN_ContactQuery_Input/xpath%3D%252Fbody/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:in="http://www.siebel.com/xml/Contact%20Web%20Access%20WPS%20CERN"
    xmlns:in2="wsdl.http://SBL_ContactWidget_Lib/Invoke"
    xmlns:in3="http://SBL_ContactWidget_Lib/Invoke"
    xmlns:in4="http://wservice.cerner.com/"
    xmlns:in5="http://www.siebel.com/xml/Contact%20WPS%20CERN"
    xmlns:io="http://www.siebel.com/xml/Contact%20WPS%20CERN_V2"
    xmlns:io2="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io4="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io3="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:out="wsdl.http://wservice.cerner.com/V2"
    xmlns:io5="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:io6="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:io7="http://www.w3.org/2005/08/addressing"
    xmlns:out2="http://wservice.cerner.com/V2"
    xmlns:map="http://SBL_ContactWidget/xslt/ContactQueryInputToSBL"
    exclude-result-prefixes="in in2 in3 in4 in5 map xalan"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root template  -->
  <xsl:template match="/">
    <xsl:apply-templates select="body" mode="map:ContactQueryInputToSBL"/>
  </xsl:template>

  <!-- This rule represents an element mapping: "body" to "body".  -->
  <xsl:template match="body"  mode="map:ContactQueryInputToSBL">
    <body>
      <out2:Contact_spcQuery_spcWPS_spcCERN_ContactQuery_Input>
        <!-- a simple data mapping: "in3:ContactQuery/in4:Contact_spcQuery_spcWPS_spcCERN_ContactQuery_Input/in4:ComplexSearchSpec"(string) to "out2:ComplexSearchSpec"(string) -->
        <out2:ComplexSearchSpec>
          <xsl:value-of select="in3:ContactQuery/in4:Contact_spcQuery_spcWPS_spcCERN_ContactQuery_Input/in4:ComplexSearchSpec"/>
        </out2:ComplexSearchSpec>
        <!-- a structural mapping: "in3:ContactQuery/in4:Contact_spcQuery_spcWPS_spcCERN_ContactQuery_Input/in5:ListOfContactWpsCern"(ListOfContactWpsCern) to "io:ListOfContactWpsCern"(ListOfContactWpsCern) -->
        <xsl:apply-templates select="in3:ContactQuery/in4:Contact_spcQuery_spcWPS_spcCERN_ContactQuery_Input/in5:ListOfContactWpsCern" mode="localListOfContactWpsCernToListOfContactWpsCern_1274848686"/>
      </out2:Contact_spcQuery_spcWPS_spcCERN_ContactQuery_Input>
    </body>
  </xsl:template>

  <!-- This rule represents an element mapping: "in5:ListOfContactWpsCern" to "io:ListOfContactWpsCern".  -->
  <xsl:template match="in5:ListOfContactWpsCern"  mode="localListOfContactWpsCernToListOfContactWpsCern_1274848686">
    <io:ListOfContactWpsCern>
      <!-- a for-each transform: "in5:Contact"(Contact) to "io:Contact"(Contact) -->
      <xsl:apply-templates select="in5:Contact" mode="localContactToContact_192996260"/>
    </io:ListOfContactWpsCern>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in5:Contact" to "io:Contact".  -->
  <xsl:template match="in5:Contact"  mode="localContactToContact_192996260">
    <io:Contact>
      <!-- a simple data mapping: "in5:Id"(string30) to "io:Id"(string30) -->
      <xsl:if test="in5:Id">
        <io:Id>
          <xsl:value-of select="in5:Id"/>
        </io:Id>
      </xsl:if>
      <!-- a simple data mapping: "in5:MobilePhoneNum"(string) to "io:MobilePhoneNum"(string) -->
      <xsl:if test="in5:MobilePhoneNum">
        <io:MobilePhoneNum>
          <xsl:value-of select="in5:MobilePhoneNum"/>
        </io:MobilePhoneNum>
      </xsl:if>
      <!-- a simple data mapping: "in5:PrimaryEmail"(string50) to "io:PrimaryEmail"(string50) -->
      <xsl:if test="in5:PrimaryEmail">
        <io:PrimaryEmail>
          <xsl:value-of select="in5:PrimaryEmail"/>
        </io:PrimaryEmail>
      </xsl:if>
      <!-- a simple data mapping: "in5:FirstName"(string50) to "io:FirstName"(string50) -->
      <xsl:if test="in5:FirstName">
        <io:FirstName>
          <xsl:value-of select="in5:FirstName"/>
        </io:FirstName>
      </xsl:if>
      <!-- a simple data mapping: "in5:HomePhoneNum"(string) to "io:HomePhoneNum"(string) -->
      <xsl:if test="in5:HomePhoneNum">
        <io:HomePhoneNum>
          <xsl:value-of select="in5:HomePhoneNum"/>
        </io:HomePhoneNum>
      </xsl:if>
      <!-- a simple data mapping: "in5:IntegrationId"(string30) to "io:IntegrationId"(string30) -->
      <xsl:if test="in5:IntegrationId">
        <io:IntegrationId>
          <xsl:value-of select="in5:IntegrationId"/>
        </io:IntegrationId>
      </xsl:if>
      <!-- a simple data mapping: "in5:JobTitle"(string75) to "io:JobTitle"(string75) -->
      <xsl:if test="in5:JobTitle">
        <io:JobTitle>
          <xsl:value-of select="in5:JobTitle"/>
        </io:JobTitle>
      </xsl:if>
      <!-- a simple data mapping: "in5:LastName"(string50) to "io:LastName"(string50) -->
      <xsl:if test="in5:LastName">
        <io:LastName>
          <xsl:value-of select="in5:LastName"/>
        </io:LastName>
      </xsl:if>
      <!-- a simple data mapping: "in5:LoginName"(string50) to "io:LoginName"(string50) -->
      <xsl:if test="in5:LoginName">
        <io:LoginName>
          <xsl:value-of select="in5:LoginName"/>
        </io:LoginName>
      </xsl:if>
      <!-- a simple data mapping: "in5:MrMs"(string15) to "io:MrMs"(string15) -->
      <xsl:if test="in5:MrMs">
        <io:MrMs>
          <xsl:value-of select="in5:MrMs"/>
        </io:MrMs>
      </xsl:if>
      <!-- a simple data mapping: "in5:Mnemonic"(string10) to "io:Mnemonic"(string10) -->
      <xsl:if test="in5:Mnemonic">
        <io:Mnemonic>
          <xsl:value-of select="in5:Mnemonic"/>
        </io:Mnemonic>
      </xsl:if>
      <!-- a simple data mapping: "in5:Role"(string30) to "io:Role"(string30) -->
      <xsl:if test="in5:Role">
        <io:Role>
          <xsl:value-of select="in5:Role"/>
        </io:Role>
      </xsl:if>
      <!-- a simple data mapping: "in5:WorkPhoneNum"(string) to "io:WorkPhoneNum"(string) -->
      <xsl:if test="in5:WorkPhoneNum">
        <io:WorkPhoneNum>
          <xsl:value-of select="in5:WorkPhoneNum"/>
        </io:WorkPhoneNum>
      </xsl:if>
      <!-- a simple data mapping: "in5:WorkPhoneExtension"(string10) to "io:WorkPhoneExtension"(string10) -->
      <xsl:if test="in5:WorkPhoneExtension">
        <io:WorkPhoneExtension>
          <xsl:value-of select="in5:WorkPhoneExtension"/>
        </io:WorkPhoneExtension>
      </xsl:if>
      <!-- a structural mapping: "in5:ListOfContact_Account"(ListOfContact_Account) to "io:ListOfContact_Account"(ListOfContact_Account) -->
      <xsl:apply-templates select="in5:ListOfContact_Account" mode="localListOfContact_AccountToListOfContact_Account_791174356"/>
      <!-- a structural mapping: "in5:ListOfContact_BusinessAddress"(ListOfContact_BusinessAddress) to "io:ListOfContact_BusinessAddress"(ListOfContact_BusinessAddress) -->
      <xsl:apply-templates select="in5:ListOfContact_BusinessAddress" mode="localListOfContact_BusinessAddressToListOfContact_BusinessAddress_869620228"/>
      <!-- a structural mapping: "in5:ListOfContact_AlternatePhone"(ListOfContact_AlternatePhone) to "io:ListOfContact_AlternatePhone"(ListOfContact_AlternatePhone) -->
      <xsl:apply-templates select="in5:ListOfContact_AlternatePhone" mode="localListOfContact_AlternatePhoneToListOfContact_AlternatePhone_83765339"/>
      <!-- a structural mapping: "in5:ListOfAccount"(ListOfAccount) to "io:ListOfAccount"(ListOfAccount) -->
      <xsl:apply-templates select="in5:ListOfAccount" mode="localListOfAccountToListOfAccount_1088316682"/>
    </io:Contact>
  </xsl:template>

  <!-- This rule represents an element mapping: "in5:ListOfContact_Account" to "io:ListOfContact_Account".  -->
  <xsl:template match="in5:ListOfContact_Account"  mode="localListOfContact_AccountToListOfContact_Account_791174356">
    <io:ListOfContact_Account>
      <!-- a for-each transform: "in5:Contact_Account"(Contact_Account) to "io:Contact_Account"(Contact_Account) -->
      <xsl:apply-templates select="in5:Contact_Account" mode="localContact_AccountToContact_Account_1109476161"/>
    </io:ListOfContact_Account>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in5:Contact_Account" to "io:Contact_Account".  -->
  <xsl:template match="in5:Contact_Account"  mode="localContact_AccountToContact_Account_1109476161">
    <io:Contact_Account>
      <!-- a simple data mapping: "in5:Account"(string100) to "io:Account"(string100) -->
      <xsl:if test="in5:Account">
        <io:Account>
          <xsl:value-of select="in5:Account"/>
        </io:Account>
      </xsl:if>
      <!-- a simple data mapping: "in5:AccountLocation"(string10) to "io:AccountLocation"(string10) -->
      <xsl:if test="in5:AccountLocation">
        <io:AccountLocation>
          <xsl:value-of select="in5:AccountLocation"/>
        </io:AccountLocation>
      </xsl:if>
      <!-- a simple data mapping: "in5:AccountStatus"(string30) to "io:AccountStatus"(string30) -->
      <xsl:if test="in5:AccountStatus">
        <io:AccountStatus>
          <xsl:value-of select="in5:AccountStatus"/>
        </io:AccountStatus>
      </xsl:if>
    </io:Contact_Account>
  </xsl:template>

  <!-- This rule represents an element mapping: "in5:ListOfContact_BusinessAddress" to "io:ListOfContact_BusinessAddress".  -->
  <xsl:template match="in5:ListOfContact_BusinessAddress"  mode="localListOfContact_BusinessAddressToListOfContact_BusinessAddress_869620228">
    <io:ListOfContact_BusinessAddress>
      <!-- a for-each transform: "in5:Contact_BusinessAddress"(Contact_BusinessAddress) to "io:Contact_BusinessAddress"(Contact_BusinessAddress) -->
      <xsl:apply-templates select="in5:Contact_BusinessAddress" mode="localContact_BusinessAddressToContact_BusinessAddress_1172361478"/>
    </io:ListOfContact_BusinessAddress>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in5:Contact_BusinessAddress" to "io:Contact_BusinessAddress".  -->
  <xsl:template match="in5:Contact_BusinessAddress"  mode="localContact_BusinessAddressToContact_BusinessAddress_1172361478">
    <io:Contact_BusinessAddress>
      <!-- a simple data mapping: "in5:City"(string50) to "io:City"(string50) -->
      <xsl:if test="in5:City">
        <io:City>
          <xsl:value-of select="in5:City"/>
        </io:City>
      </xsl:if>
      <!-- a simple data mapping: "in5:Country"(string30) to "io:Country"(string30) -->
      <xsl:if test="in5:Country">
        <io:Country>
          <xsl:value-of select="in5:Country"/>
        </io:Country>
      </xsl:if>
      <!-- a simple data mapping: "in5:ZIPPostalCode"(string30) to "io:ZIPPostalCode"(string30) -->
      <xsl:if test="in5:ZIPPostalCode">
        <io:ZIPPostalCode>
          <xsl:value-of select="in5:ZIPPostalCode"/>
        </io:ZIPPostalCode>
      </xsl:if>
      <!-- a simple data mapping: "in5:StateProvince"(string10) to "io:StateProvince"(string10) -->
      <xsl:if test="in5:StateProvince">
        <io:StateProvince>
          <xsl:value-of select="in5:StateProvince"/>
        </io:StateProvince>
      </xsl:if>
      <!-- a simple data mapping: "in5:ClientAddress"(string200) to "io:ClientAddress"(string200) -->
      <xsl:if test="in5:ClientAddress">
        <io:ClientAddress>
          <xsl:value-of select="in5:ClientAddress"/>
        </io:ClientAddress>
      </xsl:if>
      <!-- a simple data mapping: "in5:AddressLine2"(string100) to "io:AddressLine2"(string100) -->
      <xsl:if test="in5:AddressLine2">
        <io:AddressLine2>
          <xsl:value-of select="in5:AddressLine2"/>
        </io:AddressLine2>
      </xsl:if>
    </io:Contact_BusinessAddress>
  </xsl:template>

  <!-- This rule represents an element mapping: "in5:ListOfContact_AlternatePhone" to "io:ListOfContact_AlternatePhone".  -->
  <xsl:template match="in5:ListOfContact_AlternatePhone"  mode="localListOfContact_AlternatePhoneToListOfContact_AlternatePhone_83765339">
    <io:ListOfContact_AlternatePhone>
      <!-- a for-each transform: "in5:Contact_AlternatePhone"(Contact_AlternatePhone) to "io:Contact_AlternatePhone"(Contact_AlternatePhone) -->
      <xsl:apply-templates select="in5:Contact_AlternatePhone" mode="localContact_AlternatePhoneToContact_AlternatePhone_1229234644"/>
    </io:ListOfContact_AlternatePhone>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in5:Contact_AlternatePhone" to "io:Contact_AlternatePhone".  -->
  <xsl:template match="in5:Contact_AlternatePhone"  mode="localContact_AlternatePhoneToContact_AlternatePhone_1229234644">
    <io:Contact_AlternatePhone>
      <!-- a simple data mapping: "in5:AlternatePhoneNum"(string) to "io:AlternatePhoneNum"(string) -->
      <xsl:if test="in5:AlternatePhoneNum">
        <io:AlternatePhoneNum>
          <xsl:value-of select="in5:AlternatePhoneNum"/>
        </io:AlternatePhoneNum>
      </xsl:if>
    </io:Contact_AlternatePhone>
  </xsl:template>

  <!-- This rule represents an element mapping: "in5:ListOfAccount" to "io:ListOfAccount".  -->
  <xsl:template match="in5:ListOfAccount"  mode="localListOfAccountToListOfAccount_1088316682">
    <io:ListOfAccount>
      <!-- a for-each transform: "in5:Account"(Account) to "io:Account"(Account) -->
      <xsl:apply-templates select="in5:Account" mode="localAccountToAccount_1968281229"/>
    </io:ListOfAccount>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in5:Account" to "io:Account".  -->
  <xsl:template match="in5:Account"  mode="localAccountToAccount_1968281229">
    <io:Account>
      <!-- a simple data mapping: "in5:StatusofAffiliation"(string30) to "io:StatusofAffiliation"(string30) -->
      <xsl:if test="in5:StatusofAffiliation">
        <io:StatusofAffiliation>
          <xsl:value-of select="in5:StatusofAffiliation"/>
        </io:StatusofAffiliation>
      </xsl:if>
      <!-- a simple data mapping: "in5:JobTitle"(string50) to "io:JobTitle"(string50) -->
      <xsl:if test="in5:JobTitle">
        <io:JobTitle>
          <xsl:value-of select="in5:JobTitle"/>
        </io:JobTitle>
      </xsl:if>
      <!-- a simple data mapping: "in5:Role"(string30) to "io:Role"(string30) -->
      <xsl:if test="in5:Role">
        <io:Role>
          <xsl:value-of select="in5:Role"/>
        </io:Role>
      </xsl:if>
      <!-- a simple data mapping: "in5:Mnemonic"(string10) to "io:Mnemonic"(string10) -->
      <xsl:if test="in5:Mnemonic">
        <io:Mnemonic>
          <xsl:value-of select="in5:Mnemonic"/>
        </io:Mnemonic>
      </xsl:if>
    </io:Account>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
