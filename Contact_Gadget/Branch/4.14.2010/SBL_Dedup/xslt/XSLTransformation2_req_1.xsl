<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/XSLTransformation2_req_1.map" md5sum="62644cfefcd2e9659f5dfa8e7b5fdedc" version="1.0.130" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor V1.0.130
*
*   Mapping file:		XSLTransformation2_req_1.map
*   Map declaration(s):	XSLTransformation2_req_1
*   Input file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252Fwservice.cerner.com%257DDeduplication_spcProxy_spcCERN_Dedup_Output/xpath%3D%252Fbody/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FSBL_Dedup_Lib%252FInvoke%257DDedupResponseMsg/xpath%3D%252Fbody/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:in="wsdl.http://wservice.cerner.com"
    xmlns:in2="http://wservice.cerner.com"
    xmlns:out="http://SBL_Dedup_Lib"
    xmlns:out2="http://SBL_Dedup_Lib/Invoke"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:io="http://www.siebel.com/xml/Deduplication%20External%20Output%20CERN"
    xmlns:out3="wsdl.http://SBL_Dedup_Lib/Invoke"
    exclude-result-prefixes="in in2 xalan"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="yes" xalan:indent-amount="2"/>
  <xsl:strip-space elements="*"/>

  <!-- root template  -->
  <xsl:template match="/">
    <xsl:apply-templates select="body" mode="XSLTransformation2_req_1"/>
  </xsl:template>

  <!-- This rule represents an element mapping: "body" to "body".  -->
  <xsl:template match="body"  mode="XSLTransformation2_req_1">
    <body>
      <out2:DedupResponse>
        <Deduplication_spcProxy_spcCERN_Dedup_Output>
          <!-- a for-each transform: "io:MatchInfo"(MatchInfo) to "MatchInfo"(MatchInfo) -->
          <xsl:for-each select="in2:Deduplication_spcProxy_spcCERN_Dedup_Output/io:PropertySet/io:GenericSettings/io:MatchInfo">
            <MatchInfo>
              <!-- variables for custom code -->
              <xsl:variable name="MatchInfo" select="."/>
              <xsl:call-template name="copyNamespaceDeclarations">
                <xsl:with-param name="root" select="$MatchInfo"/>
              </xsl:call-template>
              <xsl:copy-of select="$MatchInfo/@*|$MatchInfo/node()"/>
            </MatchInfo>
          </xsl:for-each>
        </Deduplication_spcProxy_spcCERN_Dedup_Output>
      </out2:DedupResponse>
    </body>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
