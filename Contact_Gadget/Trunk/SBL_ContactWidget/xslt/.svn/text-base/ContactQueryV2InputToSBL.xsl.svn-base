<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/ContactQueryV2InputToSBL.map" md5sum="dbd0a08a788b3eb2e04e8c0f9cf4bda9" version="7.0.401" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor V7.0.401
*
*   Mapping file:		ContactQueryV2InputToSBL.map
*   Map declaration(s):	ContactQueryV2InputToSBL
*   Input file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FSBL_ContactWidget_Lib%252FInvoke%257DContactQueryV2RequestMsg/xpath%3D%252Fbody/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252Fwservice.cerner.com%252FV3%257DContact_spcQuery_spcWPS_spcCERN_ContactQuery_Input/xpath%3D%252Fbody/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:str="http://exslt.org/strings"
    xmlns:set="http://exslt.org/sets"
    xmlns:math="http://exslt.org/math"
    xmlns:exsl="http://exslt.org/common"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:in="http://www.siebel.com/xml/Contact%20WPS%20CERN_V2"
    xmlns:in2="wsdl.http://SBL_ContactWidget_Lib/Invoke"
    xmlns:in3="http://wservice.cerner.com/V2"
    xmlns:in4="http://SBL_ContactWidget_Lib/Invoke"
    xmlns:in5="http://www.siebel.com/xml/Contact%20WPS%20CERN"
    xmlns:out="http://wservice.cerner.com/V3"
    xmlns:io="http://www.siebel.com/xml/Contact%20WPS%20CERN_V3"
    xmlns:io2="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io4="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io3="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:out2="wsdl.http://wservice.cerner.com/V3"
    xmlns:io5="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:io6="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:xsd4xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:io7="http://www.w3.org/2005/08/addressing"
    xmlns:map="http://SBL_ContactWidget/xslt/ContactQueryV2InputToSBL"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="set in msl math exsl in2 in3 date in4 in5 xalan str map"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <dataObject>
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'out2:Contact_spcQuery_spcWPS_spcCERN_ContactQuery_Input'"/>
            </xsl:attribute>
            <xsl:call-template name="map:ContactQueryV2InputToSBL2">
              <xsl:with-param name="body" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </dataObject>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="body" mode="map:ContactQueryV2InputToSBL"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "body" to "body".  -->
  <xsl:template match="body"  mode="map:ContactQueryV2InputToSBL">
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out2:Contact_spcQuery_spcWPS_spcCERN_ContactQuery_Input'"/>
      </xsl:attribute>
      <out:Contact_spcQuery_spcWPS_spcCERN_ContactQuery_Input>
        <!-- a simple data mapping: "in4:ContactQueryV2/in3:Contact_spcQuery_spcWPS_spcCERN_ContactQuery_Input/in3:ComplexSearchSpec"(string) to "out:ComplexSearchSpec"(string) -->
        <out:ComplexSearchSpec>
          <xsl:value-of select="in4:ContactQueryV2/in3:Contact_spcQuery_spcWPS_spcCERN_ContactQuery_Input/in3:ComplexSearchSpec"/>
        </out:ComplexSearchSpec>
        <!-- a structural mapping: "in4:ContactQueryV2/in3:Contact_spcQuery_spcWPS_spcCERN_ContactQuery_Input/in:ListOfContactWpsCern"(ListOfContactWpsCern) to "io:ListOfContactWpsCern"(ListOfContactWpsCern) -->
        <xsl:apply-templates select="in4:ContactQueryV2/in3:Contact_spcQuery_spcWPS_spcCERN_ContactQuery_Input/in:ListOfContactWpsCern" mode="localListOfContactWpsCernToListOfContactWpsCern_887439191"/>
      </out:Contact_spcQuery_spcWPS_spcCERN_ContactQuery_Input>
    </body>
  </xsl:template>

  <!-- This rule represents a type mapping: "body" to "body".  -->
  <xsl:template name="map:ContactQueryV2InputToSBL2">
    <xsl:param name="body"/>
    <out:Contact_spcQuery_spcWPS_spcCERN_ContactQuery_Input>
      <!-- a simple data mapping: "$body/in4:ContactQueryV2/in3:Contact_spcQuery_spcWPS_spcCERN_ContactQuery_Input/in3:ComplexSearchSpec"(string) to "out:ComplexSearchSpec"(string) -->
      <out:ComplexSearchSpec>
        <xsl:value-of select="$body/in4:ContactQueryV2/in3:Contact_spcQuery_spcWPS_spcCERN_ContactQuery_Input/in3:ComplexSearchSpec"/>
      </out:ComplexSearchSpec>
      <!-- a structural mapping: "$body/in4:ContactQueryV2/in3:Contact_spcQuery_spcWPS_spcCERN_ContactQuery_Input/in:ListOfContactWpsCern"(ListOfContactWpsCern) to "io:ListOfContactWpsCern"(ListOfContactWpsCern) -->
      <xsl:apply-templates select="$body/in4:ContactQueryV2/in3:Contact_spcQuery_spcWPS_spcCERN_ContactQuery_Input/in:ListOfContactWpsCern" mode="localListOfContactWpsCernToListOfContactWpsCern_887439191"/>
    </out:Contact_spcQuery_spcWPS_spcCERN_ContactQuery_Input>
  </xsl:template>

  <!-- This rule represents an element mapping: "in:ListOfContactWpsCern" to "io:ListOfContactWpsCern".  -->
  <xsl:template match="in:ListOfContactWpsCern"  mode="localListOfContactWpsCernToListOfContactWpsCern_887439191">
    <io:ListOfContactWpsCern>
      <!-- a for-each transform: "in:Contact"(Contact) to "io:Contact"(Contact) -->
      <xsl:apply-templates select="in:Contact" mode="localContactToContact_518619064"/>
    </io:ListOfContactWpsCern>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in:Contact" to "io:Contact".  -->
  <xsl:template match="in:Contact"  mode="localContactToContact_518619064">
    <io:Contact>
      <!-- a simple data mapping: "in:Id"(string30) to "io:Id"(string30) -->
      <xsl:if test="in:Id">
        <io:Id>
          <xsl:value-of select="in:Id"/>
        </io:Id>
      </xsl:if>
      <!-- a simple data mapping: "in:MobilePhoneNum"(string) to "io:MobilePhoneNum"(string) -->
      <xsl:if test="in:MobilePhoneNum">
        <io:MobilePhoneNum>
          <xsl:value-of select="in:MobilePhoneNum"/>
        </io:MobilePhoneNum>
      </xsl:if>
      <!-- a simple data mapping: "in:PrimaryEmail"(string50) to "io:PrimaryEmail"(string50) -->
      <xsl:if test="in:PrimaryEmail">
        <io:PrimaryEmail>
          <xsl:value-of select="in:PrimaryEmail"/>
        </io:PrimaryEmail>
      </xsl:if>
      <!-- a simple data mapping: "in:FirstName"(string50) to "io:FirstName"(string50) -->
      <xsl:if test="in:FirstName">
        <io:FirstName>
          <xsl:value-of select="in:FirstName"/>
        </io:FirstName>
      </xsl:if>
      <!-- a simple data mapping: "in:HomePhoneNum"(string) to "io:HomePhoneNum"(string) -->
      <xsl:if test="in:HomePhoneNum">
        <io:HomePhoneNum>
          <xsl:value-of select="in:HomePhoneNum"/>
        </io:HomePhoneNum>
      </xsl:if>
      <!-- a simple data mapping: "in:IntegrationId"(string30) to "io:IntegrationId"(string30) -->
      <xsl:if test="in:IntegrationId">
        <io:IntegrationId>
          <xsl:value-of select="in:IntegrationId"/>
        </io:IntegrationId>
      </xsl:if>
      <!-- a simple data mapping: "in:JobTitle"(string75) to "io:JobTitle"(string75) -->
      <xsl:if test="in:JobTitle">
        <io:JobTitle>
          <xsl:value-of select="in:JobTitle"/>
        </io:JobTitle>
      </xsl:if>
      <!-- a simple data mapping: "in:LastName"(string50) to "io:LastName"(string50) -->
      <xsl:if test="in:LastName">
        <io:LastName>
          <xsl:value-of select="in:LastName"/>
        </io:LastName>
      </xsl:if>
      <!-- a simple data mapping: "in:LoginName"(string50) to "io:LoginName"(string50) -->
      <xsl:if test="in:LoginName">
        <io:LoginName>
          <xsl:value-of select="in:LoginName"/>
        </io:LoginName>
      </xsl:if>
      <!-- a simple data mapping: "in:MrMs"(string15) to "io:MrMs"(string15) -->
      <xsl:if test="in:MrMs">
        <io:MrMs>
          <xsl:value-of select="in:MrMs"/>
        </io:MrMs>
      </xsl:if>
      <!-- a simple data mapping: "in:Mnemonic"(string10) to "io:Mnemonic"(string10) -->
      <xsl:if test="in:Mnemonic">
        <io:Mnemonic>
          <xsl:value-of select="in:Mnemonic"/>
        </io:Mnemonic>
      </xsl:if>
      <!-- a simple data mapping: "in:Role"(string30) to "io:Role"(string30) -->
      <xsl:if test="in:Role">
        <io:Role>
          <xsl:value-of select="in:Role"/>
        </io:Role>
      </xsl:if>
      <!-- a simple data mapping: "in:NeverEmail"(string) to "io:NeverEmail"(string) -->
      <xsl:if test="in:NeverEmail">
        <io:NeverEmail>
          <xsl:value-of select="in:NeverEmail"/>
        </io:NeverEmail>
      </xsl:if>
      <!-- a simple data mapping: "in:WorkPhoneNum"(string) to "io:WorkPhoneNum"(string) -->
      <xsl:if test="in:WorkPhoneNum">
        <io:WorkPhoneNum>
          <xsl:value-of select="in:WorkPhoneNum"/>
        </io:WorkPhoneNum>
      </xsl:if>
      <!-- a simple data mapping: "in:WorkPhoneExtension"(string10) to "io:WorkPhoneExtension"(string10) -->
      <xsl:if test="in:WorkPhoneExtension">
        <io:WorkPhoneExtension>
          <xsl:value-of select="in:WorkPhoneExtension"/>
        </io:WorkPhoneExtension>
      </xsl:if>
      <!-- a structural mapping: "in:ListOfContact_Account"(ListOfContact_Account) to "io:ListOfContact_Account"(ListOfContact_Account) -->
      <xsl:apply-templates select="in:ListOfContact_Account" mode="localListOfContact_AccountToListOfContact_Account_157385048"/>
      <!-- a structural mapping: "in:ListOfContact_BusinessAddress"(ListOfContact_BusinessAddress) to "io:ListOfContact_BusinessAddress"(ListOfContact_BusinessAddress) -->
      <xsl:apply-templates select="in:ListOfContact_BusinessAddress" mode="localListOfContact_BusinessAddressToListOfContact_BusinessAddress_42505233"/>
      <!-- a structural mapping: "in:ListOfContact_AlternatePhone"(ListOfContact_AlternatePhone) to "io:ListOfContact_AlternatePhone"(ListOfContact_AlternatePhone) -->
      <xsl:apply-templates select="in:ListOfContact_AlternatePhone" mode="localListOfContact_AlternatePhoneToListOfContact_AlternatePhone_1724777739"/>
      <!-- a structural mapping: "in:ListOfAccount"(ListOfAccount) to "io:ListOfAccount"(ListOfAccount) -->
      <xsl:apply-templates select="in:ListOfAccount" mode="localListOfAccountToListOfAccount_862695308"/>
    </io:Contact>
  </xsl:template>

  <!-- This rule represents an element mapping: "in:ListOfContact_Account" to "io:ListOfContact_Account".  -->
  <xsl:template match="in:ListOfContact_Account"  mode="localListOfContact_AccountToListOfContact_Account_157385048">
    <io:ListOfContact_Account>
      <!-- a for-each transform: "in:Contact_Account"(Contact_Account) to "io:Contact_Account"(Contact_Account) -->
      <xsl:apply-templates select="in:Contact_Account" mode="localContact_AccountToContact_Account_463123619"/>
    </io:ListOfContact_Account>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in:Contact_Account" to "io:Contact_Account".  -->
  <xsl:template match="in:Contact_Account"  mode="localContact_AccountToContact_Account_463123619">
    <io:Contact_Account>
      <!-- a simple data mapping: "in:Account"(string100) to "io:Account"(string100) -->
      <xsl:if test="in:Account">
        <io:Account>
          <xsl:value-of select="in:Account"/>
        </io:Account>
      </xsl:if>
      <!-- a simple data mapping: "in:AccountLocation"(string10) to "io:AccountLocation"(string10) -->
      <xsl:if test="in:AccountLocation">
        <io:AccountLocation>
          <xsl:value-of select="in:AccountLocation"/>
        </io:AccountLocation>
      </xsl:if>
      <!-- a simple data mapping: "in:AccountStatus"(string30) to "io:AccountStatus"(string30) -->
      <xsl:if test="in:AccountStatus">
        <io:AccountStatus>
          <xsl:value-of select="in:AccountStatus"/>
        </io:AccountStatus>
      </xsl:if>
    </io:Contact_Account>
  </xsl:template>

  <!-- This rule represents an element mapping: "in:ListOfContact_BusinessAddress" to "io:ListOfContact_BusinessAddress".  -->
  <xsl:template match="in:ListOfContact_BusinessAddress"  mode="localListOfContact_BusinessAddressToListOfContact_BusinessAddress_42505233">
    <io:ListOfContact_BusinessAddress>
      <!-- a for-each transform: "in:Contact_BusinessAddress"(Contact_BusinessAddress) to "io:Contact_BusinessAddress"(Contact_BusinessAddress) -->
      <xsl:apply-templates select="in:Contact_BusinessAddress" mode="localContact_BusinessAddressToContact_BusinessAddress_537917092"/>
    </io:ListOfContact_BusinessAddress>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in:Contact_BusinessAddress" to "io:Contact_BusinessAddress".  -->
  <xsl:template match="in:Contact_BusinessAddress"  mode="localContact_BusinessAddressToContact_BusinessAddress_537917092">
    <io:Contact_BusinessAddress>
      <!-- a simple data mapping: "in:City"(string50) to "io:City"(string50) -->
      <xsl:if test="in:City">
        <io:City>
          <xsl:value-of select="in:City"/>
        </io:City>
      </xsl:if>
      <!-- a simple data mapping: "in:Country"(string30) to "io:Country"(string30) -->
      <xsl:if test="in:Country">
        <io:Country>
          <xsl:value-of select="in:Country"/>
        </io:Country>
      </xsl:if>
      <!-- a simple data mapping: "in:ZIPPostalCode"(string30) to "io:ZIPPostalCode"(string30) -->
      <xsl:if test="in:ZIPPostalCode">
        <io:ZIPPostalCode>
          <xsl:value-of select="in:ZIPPostalCode"/>
        </io:ZIPPostalCode>
      </xsl:if>
      <!-- a simple data mapping: "in:StateProvince"(string10) to "io:StateProvince"(string10) -->
      <xsl:if test="in:StateProvince">
        <io:StateProvince>
          <xsl:value-of select="in:StateProvince"/>
        </io:StateProvince>
      </xsl:if>
      <!-- a simple data mapping: "in:ClientAddress"(string200) to "io:ClientAddress"(string200) -->
      <xsl:if test="in:ClientAddress">
        <io:ClientAddress>
          <xsl:value-of select="in:ClientAddress"/>
        </io:ClientAddress>
      </xsl:if>
      <!-- a simple data mapping: "in:AddressLine2"(string100) to "io:AddressLine2"(string100) -->
      <xsl:if test="in:AddressLine2">
        <io:AddressLine2>
          <xsl:value-of select="in:AddressLine2"/>
        </io:AddressLine2>
      </xsl:if>
    </io:Contact_BusinessAddress>
  </xsl:template>

  <!-- This rule represents an element mapping: "in:ListOfContact_AlternatePhone" to "io:ListOfContact_AlternatePhone".  -->
  <xsl:template match="in:ListOfContact_AlternatePhone"  mode="localListOfContact_AlternatePhoneToListOfContact_AlternatePhone_1724777739">
    <io:ListOfContact_AlternatePhone>
      <!-- a for-each transform: "in:Contact_AlternatePhone"(Contact_AlternatePhone) to "io:Contact_AlternatePhone"(Contact_AlternatePhone) -->
      <xsl:apply-templates select="in:Contact_AlternatePhone" mode="localContact_AlternatePhoneToContact_AlternatePhone_143516352"/>
    </io:ListOfContact_AlternatePhone>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in:Contact_AlternatePhone" to "io:Contact_AlternatePhone".  -->
  <xsl:template match="in:Contact_AlternatePhone"  mode="localContact_AlternatePhoneToContact_AlternatePhone_143516352">
    <io:Contact_AlternatePhone>
      <!-- a simple data mapping: "in:AlternatePhoneNum"(string) to "io:AlternatePhoneNum"(string) -->
      <xsl:if test="in:AlternatePhoneNum">
        <io:AlternatePhoneNum>
          <xsl:value-of select="in:AlternatePhoneNum"/>
        </io:AlternatePhoneNum>
      </xsl:if>
    </io:Contact_AlternatePhone>
  </xsl:template>

  <!-- This rule represents an element mapping: "in:ListOfAccount" to "io:ListOfAccount".  -->
  <xsl:template match="in:ListOfAccount"  mode="localListOfAccountToListOfAccount_862695308">
    <io:ListOfAccount>
      <!-- a for-each transform: "in:Account"(Account) to "io:Account"(Account) -->
      <xsl:apply-templates select="in:Account" mode="localAccountToAccount_1763819632"/>
    </io:ListOfAccount>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in:Account" to "io:Account".  -->
  <xsl:template match="in:Account"  mode="localAccountToAccount_1763819632">
    <io:Account>
      <!-- a simple data mapping: "in:StatusofAffiliation"(string30) to "io:StatusofAffiliation"(string30) -->
      <xsl:if test="in:StatusofAffiliation">
        <io:StatusofAffiliation>
          <xsl:value-of select="in:StatusofAffiliation"/>
        </io:StatusofAffiliation>
      </xsl:if>
      <!-- a simple data mapping: "in:JobTitle"(string50) to "io:JobTitle"(string50) -->
      <xsl:if test="in:JobTitle">
        <io:JobTitle>
          <xsl:value-of select="in:JobTitle"/>
        </io:JobTitle>
      </xsl:if>
      <!-- a simple data mapping: "in:Role"(string30) to "io:Role"(string30) -->
      <xsl:if test="in:Role">
        <io:Role>
          <xsl:value-of select="in:Role"/>
        </io:Role>
      </xsl:if>
      <!-- a simple data mapping: "in:Mnemonic"(string10) to "io:Mnemonic"(string10) -->
      <xsl:if test="in:Mnemonic">
        <io:Mnemonic>
          <xsl:value-of select="in:Mnemonic"/>
        </io:Mnemonic>
      </xsl:if>
    </io:Account>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
